SEQ_simple_sequence(OPT)=SELECT FIRST 1 simple_sequence.NEXTVAL FROM systables;
IDSEL_common_Long(OPT)=select dbinfo('bigserial') from informix.systables where tabid=1;
IDSEL_common_Integer(OPT)=select dbinfo('sqlca.sqlerrd1') from informix.systables where tabid=1;

INSERT_CONTACT(CRUD,inx=Contact,outx=Contact,tab=contact)=
  insert into %%contact (%id, %person_id, %address, %type, %phone_number)
  {= values (:id(idgen=common,id=id), :person.id, :address, :type, :phoneNumber) }
;

GET_CONTACT(CRUD,inx=Contact,outx=Contact,tab=contact=c,tab=person=p)=
  select %c.id @id(id), %c.person_id @person.id(id), %c.address @address, %c.type @type, %c.phone_number @phoneNumber
         {? :person(call=toInit) | , %p.first_name @person.firstName, %p.last_name @person.lastName, %p.date_of_birth @person.dateOfBirth, %p.gender @person.gender, %p.ssn @person.ssn }
  from %%contact c
  {? :person(call=toInit) | left join %%person p on %c.person_id = %p.id }
  {= where
    {& %c.id ::= :id }
    {& %c.person_id ::= :person.id }
    {& %c.address ::= :address }
    {& %c.type ::= :type }
    {& %c.phone_number ::= :phoneNumber }
  }
;

UPDATE_CONTACT(CRUD,inx=Contact,outx=Contact,tab=contact)=
  update %%contact
  {= set
    { ,%person_id = :person.id(call=isDef) }
    { ,%address = :address(call=isDef) }
    { ,%type = :type(call=isDef) }
    { ,%phone_number = :phoneNumber(call=isDef) }
  }
  {= where
    {& %id = :id(!empty) }
  }
;

DELETE_CONTACT(CRUD,inx=Contact,outx=Contact,tab=contact)=
  delete from %%contact
  {= where
    {& %id = :id(!empty) }
  }
;

SELECT_CONTACT(QRY,inx=Contact,outx=Contact,tab=contact=c,tab=person=p)=
  select %c.id @id(id), %c.person_id @person.id(id), %c.address @address, %c.type @type, %c.phone_number @phoneNumber
         {? :person(call=toInit) | , %p.first_name @person.firstName, %p.last_name @person.lastName, %p.date_of_birth @person.dateOfBirth, %p.gender @person.gender, %p.ssn @person.ssn }
  from %%contact c
  {? :person(call=toInit) | left join %%person p on %c.person_id = %p.id }
  {= where
    {& %c.id ::= :id }
    {& %c.person_id ::= :person.id }
    {& UPPER(%c.address) like :+address }
    {& %c.type ::= :type }
    {& %c.phone_number ::= :phoneNumber }
  }
  {#1 order by %c.id }
  {#2 order by %c.person_id }
;

INSERT_PERSON(CRUD,inx=Person,outx=Person,tab=person)=
  insert into %%person (%id, %first_name, %last_name, %date_of_birth, %gender, %ssn)
  {= values (:id(idgen=simple_sequence,id=id), :firstName, :lastName, :dateOfBirth, :gender, :ssn) }
;

GET_PERSON(CRUD,inx=Person,outx=Person,tab=person=p,tab=contact=c)=
  select %p.id @id(id), %p.first_name @firstName, %p.last_name @lastName, %p.date_of_birth @dateOfBirth, %p.gender @gender, %p.ssn @ssn
         {? :contacts(call=toInit) | , %c.id @contacts.id(id), %c.person_id @contacts.person.id, %c.address @contacts.address, %c.type @contacts.type, %c.phone_number @contacts.phoneNumber }
  from %%person p
  {? :contacts(call=toInit) | left join %%contact c on %p.id = %c.person_id }
  {= where
    {& %p.id ::= :id }
    {& %p.first_name ::= :firstName }
    {& %p.last_name ::= :lastName }
    {& %p.date_of_birth ::= :dateOfBirth }
    {& %p.gender ::= :gender }
    {& %p.ssn ::= :ssn }
  }
;

UPDATE_PERSON(CRUD,inx=Person,outx=Person,tab=person)=
  update %%person
  {= set
    { ,%first_name = :firstName(call=isDef) }
    { ,%last_name = :lastName(call=isDef) }
    { ,%date_of_birth = :dateOfBirth(call=isDef) }
    { ,%gender = :gender(call=isDef) }
    { ,%ssn = :ssn(call=isDef) }
  }
  {= where
    {& %id = :id(!empty) }
  }
;

DELETE_PERSON(CRUD,inx=Person,outx=Person,tab=person)=
  delete from %%person
  {= where
    {& %id = :id(!empty) }
  }
;

SELECT_PERSON(QRY,inx=Person,outx=Person,tab=person=p,tab=contact=c)=
  select %p.id @id(id), %p.first_name @firstName, %p.last_name @lastName, %p.date_of_birth @dateOfBirth, %p.gender @gender, %p.ssn @ssn
         {? :contacts(call=toInit) | , %c.id @contacts.id(id), %c.person_id @contacts.person.id, %c.address @contacts.address, %c.type @contacts.type, %c.phone_number @contacts.phoneNumber }
  from %%person p
  {? :contacts(call=toInit) | left join %%contact c on %p.id = %c.person_id }
  {= where
    {& %p.id ::= :id }
    {& UPPER(%p.first_name) like :+firstName }
    {& UPPER(%p.last_name) like :+lastName }
    {& %p.date_of_birth ::= :dateOfBirth }
    {& UPPER(%p.gender) like :+gender }
    {& UPPER(%p.ssn) like :+ssn }
  }
  {#1 order by %p.id }
  {#2 order by %p.last_name }
;

FUN_AN_HOUR_BEFORE(CALL,inx=AnHourBefore)=
  call an_hour_before(:t)
;
FUN_AN_HOUR_BEFORE(OUT)=
  1$1(type=stamp)
;

PROC_NEW_PERSON(CALL,inx=NewPerson)=
  call new_person(:<newid, :dateOfBirth, :ssn, :firstName, :lastName, :gender)
;

FUN_NEW_PERSON_RET_RS(CALL,inx=NewPersonRetRs)=
  call new_person_ret_rs(:dateOfBirth, :ssn, :firstName, :lastName, :gender)
;
FUN_NEW_PERSON_RET_RS(OUT,outx=Person)=
  id$id first_name$firstName last_name$lastName date_of_birth$dateOfBirth gender$gender ssn$ssn
;
