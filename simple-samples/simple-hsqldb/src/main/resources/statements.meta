SEQ=SIMPLE_SEQUENCE(OPT)=call next value for SIMPLE_SEQUENCE;
IDSEL=COMMON(OPT)=call identity();

INSERT_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  insert into %%CONTACT (%ID, %PERSON_ID, %TYPE, %ADDRESS, %PHONE_NUMBER, %X_NOTE)
  {= values (:id(idgen=SIMPLE_SEQUENCE,id=ID), :person.id, :type, :address, :phoneNumber, :xNote) }
;

GET_CONTACT(CRUD,in=Contact,out=Contact,tab=contact=c,tab=person=p)=
  select %c.ID @id(id), %c.PERSON_ID @person.id(id), %c.TYPE @type, %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber, %c.X_NOTE @xNote
         {? :person(call=toInit) | , %p.FIRST_NAME @person.firstName, %p.LAST_NAME @person.lastName, %p.DATE_OF_BIRTH @person.dateOfBirth, %p.GENDER @person.gender, %p.SSN @person.ssn }
  from %%CONTACT c
  {? :person(call=toInit) | left join %%PERSON p on %c.PERSON_ID = %p.ID }
  {= where
    {& %c.ID ::= :id }
    {& %c.PERSON_ID ::= :person.id }
    {& %c.TYPE ::= :type }
    {& %c.ADDRESS ::= :address }
    {& %c.PHONE_NUMBER ::= :phoneNumber }
    {& %c.X_NOTE ::= :xNote }
  }
;

UPDATE_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  update %%CONTACT
  {= set
    { ,%PERSON_ID = :person.id(call=isDef) }
    { ,%TYPE = :type(call=isDef) }
    { ,%ADDRESS = :address(call=isDef) }
    { ,%PHONE_NUMBER = :phoneNumber(call=isDef) }
    { ,%X_NOTE = :xNote(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  delete from %%CONTACT
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_CONTACT(QRY,in=Contact,out=Contact,tab=contact=c,tab=person=p)=
  select {? :onlyIds_ | %c.ID @id(id) |
    %c.ID @id(id), %c.PERSON_ID @person.id(id), %c.TYPE @type, %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber, %c.X_NOTE @xNote
    {? :person(call=toInit) | , %p.FIRST_NAME @person.firstName, %p.LAST_NAME @person.lastName, %p.DATE_OF_BIRTH @person.dateOfBirth, %p.GENDER @person.gender, %p.SSN @person.ssn }
  }
  from %%CONTACT c
  {? :person(call=toInit) | left join %%PERSON p on %c.PERSON_ID = %p.ID }
  {= where
    {& %c.ID ::= :id }
    {& %c.PERSON_ID ::= :person.id }
    {& %c.TYPE ::= :type }
    {& %c.ADDRESS ::= :address }
    {& %c.PHONE_NUMBER ::= :phoneNumber }
    {& %c.X_NOTE ::= :xNote }
    {& %c.ID in :ids_ }
  }
  {#ID order by %c.ID }
  {#PERSON order by %c.PERSON_ID }
;

INSERT_PERSON(CRUD,in=Person,out=Person,tab=person)=
  insert into %%PERSON (%ID, %FIRST_NAME, %LAST_NAME, %DATE_OF_BIRTH, %GENDER, %SSN)
  {= values (:id(idgen=COMMON,id=ID), :firstName, :lastName, :dateOfBirth, :gender, :ssn) }
;

GET_PERSON(CRUD,in=Person,out=Person,tab=person=p,tab=contact=c,tab=personDetail=p1)=
  select %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.GENDER @gender, %p.SSN @ssn
         {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.person.id, %c.TYPE @contacts.type, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber, %c.X_NOTE @contacts.xNote }
         {? :personDetails(call=toInit) | , %p1.ID @personDetails.id.id(id), %p1.TYPE @personDetails.type(id), %p1.WEIGHT @personDetails.weight, %p1.HEIGHT @personDetails.height, %p1.DISPOSITION @personDetails.disposition, %p1.TITLES @personDetails.titles }
  from %%PERSON p
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {? :personDetails(call=toInit) | left join %%PERSON_DETAIL p1 on %p.ID = %p1.ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.FIRST_NAME ::= :firstName }
    {& %p.LAST_NAME ::= :lastName }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& %p.GENDER ::= :gender }
    {& %p.SSN ::= :ssn }
  }
;

UPDATE_PERSON(CRUD,in=Person,out=Person,tab=person)=
  update %%PERSON
  {= set
    { ,%FIRST_NAME = :firstName(call=isDef) }
    { ,%LAST_NAME = :lastName(call=isDef) }
    { ,%DATE_OF_BIRTH = :dateOfBirth(call=isDef) }
    { ,%GENDER = :gender(call=isDef) }
    { ,%SSN = :ssn(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PERSON(CRUD,in=Person,out=Person,tab=person)=
  delete from %%PERSON
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PERSON(QRY,in=Person,out=Person,tab=person=p,tab=contact=c,tab=personDetail=p1)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.GENDER @gender, %p.SSN @ssn
    {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.person.id, %c.TYPE @contacts.type, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber, %c.X_NOTE @contacts.xNote }
    {? :personDetails(call=toInit) | , %p1.ID @personDetails.id.id(id), %p1.TYPE @personDetails.type(id), %p1.WEIGHT @personDetails.weight, %p1.HEIGHT @personDetails.height, %p1.DISPOSITION @personDetails.disposition, %p1.TITLES @personDetails.titles }
  }
  from %%PERSON p
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {? :personDetails(call=toInit) | left join %%PERSON_DETAIL p1 on %p.ID = %p1.ID }
  {= where
    {& %p.ID ::= :id }
    {& UPPER(%p.FIRST_NAME) like :+firstName }
    {& UPPER(%p.LAST_NAME) like :+lastName }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& %p.GENDER ::= :gender }
    {& %p.SSN ::= :ssn }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
  {#LAST_NAME order by %p.LAST_NAME }
;

INSERT_PERSON_DETAIL(CRUD,in=PersonDetail,out=PersonDetail,tab=personDetail)=
  insert into %%PERSON_DETAIL (%ID, %TYPE, %WEIGHT, %HEIGHT, %DISPOSITION, %TITLES)
  {= values (:id.id, :type, :weight, :height, :disposition, :titles) }
;

GET_PERSON_DETAIL(CRUD,in=PersonDetail,out=PersonDetail,tab=personDetail=p,tab=person=p1)=
  select %p.ID @id.id(id), %p.TYPE @type(id), %p.WEIGHT @weight, %p.HEIGHT @height, %p.DISPOSITION @disposition, %p.TITLES @titles
         {? :id(call=toInit) | , %p1.FIRST_NAME @id.firstName, %p1.LAST_NAME @id.lastName, %p1.DATE_OF_BIRTH @id.dateOfBirth, %p1.GENDER @id.gender, %p1.SSN @id.ssn }
  from %%PERSON_DETAIL p
  {? :id(call=toInit) | left join %%PERSON p1 on %p.ID = %p1.ID }
  {= where
    {& %p.ID ::= :id.id }
    {& %p.TYPE ::= :type }
    {& %p.WEIGHT ::= :weight }
    {& %p.HEIGHT ::= :height }
    {& %p.DISPOSITION ::= :disposition }
    {& %p.TITLES ::= :titles }
  }
;

UPDATE_PERSON_DETAIL(CRUD,in=PersonDetail,out=PersonDetail,tab=personDetail)=
  update %%PERSON_DETAIL
  {= set
    { ,%WEIGHT = :weight(call=isDef) }
    { ,%HEIGHT = :height(call=isDef) }
    { ,%DISPOSITION = :disposition(call=isDef) }
    { ,%TITLES = :titles(call=isDef) }
  }
  {= where
    {& %ID = :id.id(!empty) }
    {& %TYPE = :type(!empty) }
  }
;

DELETE_PERSON_DETAIL(CRUD,in=PersonDetail,out=PersonDetail,tab=personDetail)=
  delete from %%PERSON_DETAIL
  {= where
    {& %ID = :id.id(!empty) }
    {& %TYPE = :type(!empty) }
  }
;

SELECT_PERSON_DETAIL(QRY,in=PersonDetail,out=PersonDetail,tab=personDetail=p,tab=person=p1)=
  select {? :onlyIds_ | %p.ID @id(id) |
    %p.ID @id.id(id), %p.TYPE @type(id), %p.WEIGHT @weight, %p.HEIGHT @height, %p.DISPOSITION @disposition, %p.TITLES @titles
    {? :id(call=toInit) | , %p1.FIRST_NAME @id.firstName, %p1.LAST_NAME @id.lastName, %p1.DATE_OF_BIRTH @id.dateOfBirth, %p1.GENDER @id.gender, %p1.SSN @id.ssn }
  }
  from %%PERSON_DETAIL p
  {? :id(call=toInit) | left join %%PERSON p1 on %p.ID = %p1.ID }
  {= where
    {& %p.ID ::= :id.id }
    {& %p.TYPE ::= :type }
    {& %p.WEIGHT ::= :weight }
    {& %p.HEIGHT ::= :height }
    {& %p.DISPOSITION ::= :disposition }
    {& %p.TITLES ::= :titles }
    {& %p.ID in :ids_ }
  }
  {#ID order by %p.ID }
;

FUN_AN_HOUR_BEFORE(CALL,in=AnHourBefore)=
  call AN_HOUR_BEFORE(:t)
;
FUN_AN_HOUR_BEFORE(OUT)=
  1$1(type=instant)
;

PROC_NEW_PERSON(CALL,in=NewPerson)=
  call NEW_PERSON(:<newid, :dateOfBirth, :ssn, :firstName, :lastName, :gender)
;

PROC_NEW_PERSON_RET_RS(CALL,in=NewPersonRetRs)=
  call NEW_PERSON_RET_RS(:dateOfBirth, :ssn, :firstName, :lastName, :gender)
;
PROC_NEW_PERSON_RET_RS(OUT,out=NewPersonRetRsResult)=
  ID$id FIRST_NAME$firstName LAST_NAME$lastName DATE_OF_BIRTH$dateOfBirth GENDER$gender SSN$ssn
;
