DROP TABLE IF EXISTS MEDIA_PHYSICALMEDIA CASCADE;

DROP TABLE IF EXISTS MEDIACHARACTER_PLAYEDBY CASCADE;

DROP TABLE IF EXISTS EXISTSINMEDIA_MEDIACHARACTER CASCADE;

-- Drop normal entities
    
DROP TABLE IF EXISTS PHYSICALMEDIA CASCADE;

DROP TABLE IF EXISTS MOVIE CASCADE;

DROP TABLE IF EXISTS MEDIACHARACTER CASCADE;

DROP TABLE IF EXISTS LIBRARY CASCADE;

DROP TABLE IF EXISTS ENGAGEMENT CASCADE;

DROP TABLE IF EXISTS PERSON CASCADE;

DROP TABLE IF EXISTS CONTACT CASCADE;

DROP TABLE IF EXISTS BOOK CASCADE;

DROP TABLE IF EXISTS MEDIA CASCADE;

DROP TABLE IF EXISTS TYPES CASCADE;

--DROP PROCEDURE IF EXISTS new_person;

--DROP PROCEDURE IF EXISTS new_person_ret;

DROP FUNCTION IF EXISTS an_hour_before(TIMESTAMP);

DROP TABLE IF EXISTS BILLING_DETAILS CASCADE;

DROP TABLE IF EXISTS SUBSCRIBER CASCADE;

DROP SEQUENCE IF EXISTS SQLPROC_SEQUENCE;


-- Create normal entities
    
CREATE TABLE MEDIA (
  ID BIGSERIAL,
  TITLE VARCHAR(100) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL
);


CREATE TABLE BOOK (
  ISBN VARCHAR(20) NOT NULL,
  MEDIA BIGINT NOT NULL
);


CREATE TABLE CONTACT (
  ID BIGSERIAL,
  ADRESS VARCHAR(100),
  CITY VARCHAR(100),
  ZIP VARCHAR(100),
  STATE VARCHAR(100),
  UUID VARCHAR(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  PERSONNAME_FIRST VARCHAR(100),
  PERSONNAME_LAST VARCHAR(100),
  PHONE_NUMBER VARCHAR(100)
);
ALTER SEQUENCE CONTACT_ID_SEQ RESTART WITH 50;


CREATE TABLE PERSON (
  ID BIGSERIAL,
  BIRTHDATE DATE NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONTACT BIGINT,
  SSN_NUMBER VARCHAR(20) NOT NULL,
  SSN_COUNTRY VARCHAR(100) NOT NULL,
  NAME_FIRST VARCHAR(100) NOT NULL,
  NAME_LAST VARCHAR(100) NOT NULL,
  SEX VARCHAR(100) NOT NULL,
  CLOTHES_SIZE INT
);
ALTER SEQUENCE PERSON_ID_SEQ RESTART WITH 50;


CREATE TABLE ENGAGEMENT (
  ID BIGSERIAL,
  ROLE VARCHAR(100) NOT NULL,
  UUID VARCHAR(36) NOT NULL,
  PERSON BIGINT NOT NULL,
  MEDIA BIGINT NOT NULL
);


CREATE TABLE LIBRARY (
  ID BIGSERIAL,
  NAME VARCHAR(100) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL
);


CREATE TABLE MEDIACHARACTER (
  ID BIGSERIAL,
  NAME VARCHAR(100) NOT NULL,
  UUID VARCHAR(36) NOT NULL
);


CREATE TABLE MOVIE (
  URLIMDB VARCHAR(100) NOT NULL,
  PLAYLENGTH INT NOT NULL,
  CATEGORY VARCHAR(40),
  MEDIA BIGINT NOT NULL
);


CREATE TABLE PHYSICALMEDIA (
  ID BIGSERIAL,
  STATUS VARCHAR(3) NOT NULL,
  LOCATION VARCHAR(100) NOT NULL,
  UUID VARCHAR(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  LIBRARY BIGINT
);


-- Create many to many relations
    
CREATE TABLE EXISTSINMEDIA_MEDIACHARACTER (
  MEDIACHARACTER BIGINT NOT NULL,
  EXISTSINMEDIA BIGINT NOT NULL
);


CREATE TABLE MEDIACHARACTER_PLAYEDBY (
  PLAYEDBY BIGINT NOT NULL,
  MEDIACHARACTER BIGINT NOT NULL
);


CREATE TABLE MEDIA_PHYSICALMEDIA (
  PHYSICALMEDIA BIGINT NOT NULL,
  MEDIA BIGINT NOT NULL
);


-- Primary keys
    
ALTER TABLE MEDIA ADD CONSTRAINT PK_MEDIA
	PRIMARY KEY (ID)
;

ALTER TABLE CONTACT ADD CONSTRAINT PK_CONTACT
	PRIMARY KEY (ID)
;

ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON
	PRIMARY KEY (ID)
;

ALTER TABLE ENGAGEMENT ADD CONSTRAINT PK_ENGAGEMENT
	PRIMARY KEY (ID)
;

ALTER TABLE LIBRARY ADD CONSTRAINT PK_LIBRARY
	PRIMARY KEY (ID)
;

ALTER TABLE MEDIACHARACTER ADD CONSTRAINT PK_MEDIACHARACTER
	PRIMARY KEY (ID)
;

ALTER TABLE PHYSICALMEDIA ADD CONSTRAINT PK_PHYSICALMEDIA
	PRIMARY KEY (ID)
;
    
ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT PK_EXISTSINMEDIA_MEDIACHARACTER
	PRIMARY KEY (MEDIACHARACTER, EXISTSINMEDIA)
;

ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT PK_MEDIACHARACTER_PLAYEDBY
	PRIMARY KEY (PLAYEDBY, MEDIACHARACTER)
;

ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT PK_MEDIA_PHYSICALMEDIA
	PRIMARY KEY (PHYSICALMEDIA, MEDIA)
;


-- Unique constraints

ALTER TABLE BOOK
	ADD CONSTRAINT UQ_BOOK UNIQUE (ISBN)
;

ALTER TABLE CONTACT
    ADD CONSTRAINT UQ_CONTACT UNIQUE (UUID)
;

ALTER TABLE PERSON
	ADD CONSTRAINT UQ_PERSON UNIQUE (SSN_NUMBER, SSN_COUNTRY)
;

ALTER TABLE ENGAGEMENT
    ADD CONSTRAINT UQ_ENGAGEMENT UNIQUE (UUID)
;

ALTER TABLE LIBRARY
	ADD CONSTRAINT UQ_LIBRARY UNIQUE (NAME)
;

ALTER TABLE MEDIACHARACTER
    ADD CONSTRAINT UQ_MEDIACHARACTER UNIQUE (UUID)
;

ALTER TABLE MOVIE
	ADD CONSTRAINT UQ_MOVIE UNIQUE (URLIMDB)
;

ALTER TABLE PHYSICALMEDIA
    ADD CONSTRAINT UQ_PHYSICALMEDIA UNIQUE (UUID)
;


-- Foreign key constraints

ALTER TABLE BOOK ADD CONSTRAINT FK_BOOK_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;

ALTER TABLE MOVIE ADD CONSTRAINT FK_MOVIE_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;
  
ALTER TABLE PERSON ADD CONSTRAINT FK_PERSON_CONTACT
	FOREIGN KEY (CONTACT) REFERENCES CONTACT (ID) ON DELETE CASCADE
;
  
ALTER TABLE ENGAGEMENT ADD CONSTRAINT FK_ENGAGEMENT_PERSON
	FOREIGN KEY (PERSON) REFERENCES PERSON (ID) ON DELETE CASCADE 
;

ALTER TABLE ENGAGEMENT ADD CONSTRAINT FK_ENGAGEMENT_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;

ALTER TABLE PHYSICALMEDIA ADD CONSTRAINT FK_PHYSICALMEDIA_LIBRARY
	FOREIGN KEY (LIBRARY) REFERENCES LIBRARY (ID) ON DELETE CASCADE
;

ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT FK_EXISTSINMEDIA_MEDIACHARAC53
	FOREIGN KEY (MEDIACHARACTER) REFERENCES MEDIACHARACTER (ID)
;

ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT FK_EXISTSINMEDIA_MEDIACHARAC27
	FOREIGN KEY (EXISTSINMEDIA) REFERENCES MEDIA (ID)
;
  
ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT FK_MEDIACHARACTER_PLAYEDBY_P03
	FOREIGN KEY (PLAYEDBY) REFERENCES PERSON (ID) ON DELETE CASCADE
;

ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT FK_MEDIACHARACTER_PLAYEDBY_M76
	FOREIGN KEY (MEDIACHARACTER) REFERENCES MEDIACHARACTER (ID)
;
  
ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT FK_MEDIA_PHYSICALMEDIA_PHYSI64
	FOREIGN KEY (PHYSICALMEDIA) REFERENCES PHYSICALMEDIA (ID)
;

ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT FK_MEDIA_PHYSICALMEDIA_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID)
;

-- Create pk sequence
    
CREATE SEQUENCE SQLPROC_SEQUENCE START 100;

-- types

CREATE TABLE TYPES 
(
  ID BIGSERIAL
, T_INT INT 
, T_LONG BIGINT 
, T_BYTE SMALLINT 
, T_SHORT SMALLINT 
, T_FLOAT FLOAT 
, T_DOUBLE DOUBLE PRECISION
, T_CHAR CHAR(1) 
, T_STRING VARCHAR(255) 
, T_DATE DATE 
, T_TIME TIME 
, T_DATETIME TIMESTAMP 
, T_TIMESTAMP TIMESTAMP 
, T_BOOLEAN BOOLEAN 
, T_BIG_INTEGER DECIMAL 
, T_BIG_DECIMAL DECIMAL(10,1) 
, A_BYTE BYTEA 
, A_TEXT TEXT 
, A_CLOB TEXT 
, A_BLOB BYTEA 
);

-- advanced joins

CREATE TABLE SUBSCRIBER (
  ID BIGSERIAL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  LIBRARY BIGINT NOT NULL,
  CONTACT BIGINT,
  NAME_FIRST VARCHAR(100) NOT NULL,
  NAME_LAST VARCHAR(100) NOT NULL
);

ALTER TABLE SUBSCRIBER ADD CONSTRAINT PK_SUBSCRIBER
	PRIMARY KEY (ID)
;

ALTER TABLE SUBSCRIBER ADD CONSTRAINT FK_SUBSCRIBER_LIBRARY
	FOREIGN KEY (LIBRARY) REFERENCES LIBRARY (ID) ON DELETE CASCADE
;

CREATE TABLE BILLING_DETAILS (
  ID BIGSERIAL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  SUBSCRIBER BIGINT NOT NULL,
  TYPE VARCHAR(2) NOT NULL,
  CC_NUMBER BIGINT,
  CC_EXP_MONTH SMALLINT,
  CC_EXP_YEAR SMALLINT,
  BA_ACCOUNT_NUMBER VARCHAR(100),
  BA_BANK_NAME VARCHAR(100),
  BA_SWIFT VARCHAR(20)
);

ALTER TABLE BILLING_DETAILS ADD CONSTRAINT PK_BILLING_DETAILS
	PRIMARY KEY (ID)
;

ALTER TABLE BILLING_DETAILS ADD CONSTRAINT FK_BILLING_DETAILS_SUBSCRIBER
	FOREIGN KEY (SUBSCRIBER) REFERENCES SUBSCRIBER (ID) ON DELETE CASCADE
;

-- procedures

CREATE OR REPLACE FUNCTION AN_HOUR_BEFORE(T TIMESTAMP) RETURNS TIMESTAMP
LANGUAGE SQL
AS $$
  SELECT $1 - interval '1 HOUR'
$$;

CREATE OR REPLACE FUNCTION new_person(OUT newid BIGINT, IN birthdate DATE, IN ssn_number VARCHAR(20), IN ssn_country VARCHAR(100), IN name_first VARCHAR(100), IN name_last VARCHAR(100), INOUT sex VARCHAR(100))
LANGUAGE plpgsql
AS $$
  BEGIN
    sex := COALESCE(sex, 'M');
    INSERT INTO PERSON VALUES (DEFAULT, birthdate, CURRENT_TIMESTAMP, 'test', NULL, NULL, 1, NULL, ssn_number, ssn_country, name_first, name_last, sex, NULL);
    newid := currval('person_id_seq');
  END;
$$;

CREATE OR REPLACE FUNCTION new_person_ret(IN birthdate DATE, IN ssn_number VARCHAR(20), IN ssn_country VARCHAR(100), IN name_first VARCHAR(100), IN name_last VARCHAR(100), IN sex VARCHAR(100)) RETURNS REFCURSOR
LANGUAGE plpgsql
AS $$
  DECLARE
    result REFCURSOR;
  BEGIN
    INSERT INTO PERSON VALUES (DEFAULT, birthdate, CURRENT_TIMESTAMP, 'test', NULL, NULL, 1, NULL, ssn_number, ssn_country, name_first, name_last, COALESCE(sex, 'M'), NULL);
    OPEN result FOR SELECT * FROM PERSON WHERE ID = currval('person_id_seq');
    RETURN result;
  END;
$$;

