-- Drop entities

create or replace PROCEDURE drop_table(tab in varchar2)
is   
begin
	execute immediate 'DROP TABLE ' || tab || ' CASCADE CONSTRAINTS PURGE';
exception
    WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
end

create or replace PROCEDURE drop_sequence(seq in varchar2)
is   
begin
    execute immediate 'DROP SEQUENCE ' || seq;
exception
    WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
      RAISE;
    END IF;
end

exec drop_table('TABULKA');
exec drop_sequence('TABULKA');


exec drop_table('MEDIA_PHYSICALMEDIA');

exec drop_table('MEDIACHARACTER_PLAYEDBY');

exec drop_table('EXISTSINMEDIA_MEDIACHARACTER');

-- Drop normal entities
    
exec drop_table('PHYSICALMEDIA');

exec drop_table('MOVIE');

exec drop_table('MEDIACHARACTER');

exec drop_table('LIBRARY');

exec drop_table('ENGAGEMENT');

exec drop_table('PERSON');

exec drop_table('CONTACT');

exec drop_table('BOOK');

exec drop_table('MEDIA');

exec drop_sequence('SQLPROC_SEQUENCE');

exec drop_table('TYPES');

exec drop_table('BILLING_DETAILS');

exec drop_table('SUBSCRIBER');

drop procedure drop_table;
drop procedure drop_sequence;


-- Create normal entities
    
CREATE TABLE MEDIA (
  ID NUMBER(19) NOT NULL,
  TITLE VARCHAR2(100) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL
);


CREATE TABLE BOOK (
  ISBN VARCHAR2(20) NOT NULL,
  MEDIA NUMBER(19) NOT NULL
);


CREATE TABLE CONTACT (
  ID NUMBER(19) NOT NULL,
  ADRESS VARCHAR2(100),
  CITY VARCHAR2(100),
  ZIP VARCHAR2(100),
  STATE VARCHAR2(100),
  UUID VARCHAR2(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL,
  PERSONNAME_FIRST VARCHAR2(100),
  PERSONNAME_LAST VARCHAR2(100),
  PHONE_NUMBER VARCHAR2(100)
);


CREATE TABLE PERSON (
  ID NUMBER(19) NOT NULL,
  BIRTHDATE DATE NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL,
  CONTACT NUMBER(19),
  SSN_NUMBER VARCHAR2(20) NOT NULL,
  SSN_COUNTRY VARCHAR2(100) NOT NULL,
  NAME_FIRST VARCHAR2(100) NOT NULL,
  NAME_LAST VARCHAR2(100) NOT NULL,
  SEX VARCHAR2(100) NOT NULL,
  CLOTHES_SIZE NUMBER(10)
);


CREATE TABLE ENGAGEMENT (
  ID NUMBER(19) NOT NULL,
  ROLE VARCHAR2(100) NOT NULL,
  UUID VARCHAR2(36) NOT NULL,
  PERSON NUMBER(19) NOT NULL,
  MEDIA NUMBER(19) NOT NULL
);


CREATE TABLE LIBRARY (
  ID NUMBER(19) NOT NULL,
  NAME VARCHAR2(100) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL
);


CREATE TABLE MEDIACHARACTER (
  ID NUMBER(19) NOT NULL,
  NAME VARCHAR2(100) NOT NULL,
  UUID VARCHAR2(36) NOT NULL
);


CREATE TABLE MOVIE (
  URLIMDB VARCHAR2(100) NOT NULL,
  PLAYLENGTH NUMBER(10) NOT NULL,
  CATEGORY VARCHAR2(40),
  MEDIA NUMBER(19) NOT NULL
);


CREATE TABLE PHYSICALMEDIA (
  ID NUMBER(19) NOT NULL,
  STATUS VARCHAR2(3) NOT NULL,
  LOCATION VARCHAR2(100) NOT NULL,
  UUID VARCHAR2(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL,
  LIBRARY NUMBER(19)
);


-- Create many to many relations
    
CREATE TABLE EXISTSINMEDIA_MEDIACHARACTER (
  MEDIACHARACTER NUMBER(19) NOT NULL,
  EXISTSINMEDIA NUMBER(19) NOT NULL
);


CREATE TABLE MEDIACHARACTER_PLAYEDBY (
  PLAYEDBY NUMBER(19) NOT NULL,
  MEDIACHARACTER NUMBER(19) NOT NULL
);


CREATE TABLE MEDIA_PHYSICALMEDIA (
  PHYSICALMEDIA NUMBER(19) NOT NULL,
  MEDIA NUMBER(19) NOT NULL
);


-- Primary keys
    
ALTER TABLE MEDIA ADD CONSTRAINT PK_MEDIA
	PRIMARY KEY (ID)
;

ALTER TABLE CONTACT ADD CONSTRAINT PK_CONTACT
	PRIMARY KEY (ID)
;

ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON
	PRIMARY KEY (ID)
;

ALTER TABLE ENGAGEMENT ADD CONSTRAINT PK_ENGAGEMENT
	PRIMARY KEY (ID)
;

ALTER TABLE LIBRARY ADD CONSTRAINT PK_LIBRARY
	PRIMARY KEY (ID)
;

ALTER TABLE MEDIACHARACTER ADD CONSTRAINT PK_MEDIACHARACTER
	PRIMARY KEY (ID)
;

ALTER TABLE PHYSICALMEDIA ADD CONSTRAINT PK_PHYSICALMEDIA
	PRIMARY KEY (ID)
;
    
ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT PK_EXISTSINMEDIA_MEDIACHARACTE
	PRIMARY KEY (MEDIACHARACTER, EXISTSINMEDIA)
;

ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT PK_MEDIACHARACTER_PLAYEDBY
	PRIMARY KEY (PLAYEDBY, MEDIACHARACTER)
;

ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT PK_MEDIA_PHYSICALMEDIA
	PRIMARY KEY (PHYSICALMEDIA, MEDIA)
;


-- Unique constraints

ALTER TABLE BOOK
	ADD CONSTRAINT UQ_BOOK UNIQUE (ISBN)
;

ALTER TABLE CONTACT
    ADD CONSTRAINT UQ_CONTACT UNIQUE (UUID)
;

ALTER TABLE PERSON
	ADD CONSTRAINT UQ_PERSON UNIQUE (SSN_NUMBER, SSN_COUNTRY)
;

ALTER TABLE ENGAGEMENT
    ADD CONSTRAINT UQ_ENGAGEMENT UNIQUE (UUID)
;

ALTER TABLE LIBRARY
	ADD CONSTRAINT UQ_LIBRARY UNIQUE (NAME)
;

ALTER TABLE MEDIACHARACTER
    ADD CONSTRAINT UQ_MEDIACHARACTER UNIQUE (UUID)
;

ALTER TABLE MOVIE
	ADD CONSTRAINT UQ_MOVIE UNIQUE (URLIMDB)
;

ALTER TABLE PHYSICALMEDIA
    ADD CONSTRAINT UQ_PHYSICALMEDIA UNIQUE (UUID)
;


-- Foreign key constraints

ALTER TABLE BOOK ADD CONSTRAINT FK_BOOK_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;

ALTER TABLE MOVIE ADD CONSTRAINT FK_MOVIE_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;
  
ALTER TABLE PERSON ADD CONSTRAINT FK_PERSON_CONTACT
	FOREIGN KEY (CONTACT) REFERENCES CONTACT (ID) ON DELETE CASCADE
;
  
ALTER TABLE ENGAGEMENT ADD CONSTRAINT FK_ENGAGEMENT_PERSON
	FOREIGN KEY (PERSON) REFERENCES PERSON (ID) ON DELETE CASCADE
;

ALTER TABLE ENGAGEMENT ADD CONSTRAINT FK_ENGAGEMENT_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID) ON DELETE CASCADE
;

ALTER TABLE PHYSICALMEDIA ADD CONSTRAINT FK_PHYSICALMEDIA_LIBRARY
	FOREIGN KEY (LIBRARY) REFERENCES LIBRARY (ID) ON DELETE CASCADE
;

ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT FK_EXISTSINMEDIA_MEDIACHARAC53
	FOREIGN KEY (MEDIACHARACTER) REFERENCES MEDIACHARACTER (ID)
;

ALTER TABLE EXISTSINMEDIA_MEDIACHARACTER ADD CONSTRAINT FK_EXISTSINMEDIA_MEDIACHARAC27
	FOREIGN KEY (EXISTSINMEDIA) REFERENCES MEDIA (ID)
;
  
ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT FK_MEDIACHARACTER_PLAYEDBY_P03
	FOREIGN KEY (PLAYEDBY) REFERENCES PERSON (ID) ON DELETE CASCADE
;

ALTER TABLE MEDIACHARACTER_PLAYEDBY ADD CONSTRAINT FK_MEDIACHARACTER_PLAYEDBY_M76
	FOREIGN KEY (MEDIACHARACTER) REFERENCES MEDIACHARACTER (ID)
;
  
ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT FK_MEDIA_PHYSICALMEDIA_PHYSI64
	FOREIGN KEY (PHYSICALMEDIA) REFERENCES PHYSICALMEDIA (ID)
;

ALTER TABLE MEDIA_PHYSICALMEDIA ADD CONSTRAINT FK_MEDIA_PHYSICALMEDIA_MEDIA
	FOREIGN KEY (MEDIA) REFERENCES MEDIA (ID)
;


-- sequences

CREATE SEQUENCE SQLPROC_SEQUENCE INCREMENT BY 1 START WITH 100;


-- types

CREATE TABLE TYPES 
(
  ID NUMBER(19, 0) NOT NULL 
, T_INT NUMBER(10, 0) 
, T_LONG NUMBER(19, 0) 
, T_BYTE NUMBER(3, 0) 
, T_SHORT NUMBER(5, 0) 
, T_FLOAT FLOAT(126) 
, T_DOUBLE FLOAT(126) 
, T_CHAR CHAR(1 CHAR) 
, T_STRING VARCHAR2(255 CHAR) 
, T_DATE DATE 
, T_TIME DATE 
, T_DATETIME DATE 
, T_TIMESTAMP TIMESTAMP(9) 
, T_BOOLEAN NUMBER(1, 0) 
, T_BIG_INTEGER NUMBER(19, 2) 
, T_BIG_DECIMAL NUMBER(19, 2) 
, A_BYTE RAW(255) 
, A_TEXT LONG 
, A_CLOB CLOB 
, A_BLOB BLOB 
, CONSTRAINT PK_TYPES PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);


-- More inheritance

CREATE TABLE SUBSCRIBER (
  ID NUMBER(19) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL,
  LIBRARY NUMBER(19) NOT NULL,
  CONTACT NUMBER(19),
  NAME_FIRST VARCHAR2(100) NOT NULL,
  NAME_LAST VARCHAR2(100) NOT NULL
);
    
ALTER TABLE SUBSCRIBER ADD CONSTRAINT PK_SUBSCRIBER
	PRIMARY KEY (ID)
;

ALTER TABLE SUBSCRIBER ADD CONSTRAINT FK_SUBSCRIBER_LIBRARY
	FOREIGN KEY (LIBRARY) REFERENCES LIBRARY (ID) ON DELETE CASCADE
;

CREATE TABLE BILLING_DETAILS (
  ID NUMBER(19) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR2(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR2(50),
  VERSION NUMBER(19) NOT NULL,
  SUBSCRIBER NUMBER(19) NOT NULL,
  TYPE VARCHAR2(2) NOT NULL,
  CC_NUMBER NUMBER(19),
  CC_EXP_MONTH NUMBER(5, 0),
  CC_EXP_YEAR NUMBER(5, 0),
  BA_ACCOUNT_NUMBER VARCHAR(100),
  BA_BANK_NAME VARCHAR(100),
  BA_SWIFT VARCHAR(20)
);
    
ALTER TABLE BILLING_DETAILS ADD CONSTRAINT PK_BILLING_DETAILS
	PRIMARY KEY (ID)
;

ALTER TABLE BILLING_DETAILS ADD CONSTRAINT FK_BILLING_DETAILS_SUBSCRIBER
	FOREIGN KEY (SUBSCRIBER) REFERENCES SUBSCRIBER (ID) ON DELETE CASCADE
;


-- Procedures

CREATE OR REPLACE PROCEDURE new_person (newid OUT NUMBER, birthdate IN DATE, ssn_number IN VARCHAR2, ssn_country IN VARCHAR2, name_first IN VARCHAR2, name_last IN VARCHAR2, sex IN OUT VARCHAR2)
IS
BEGIN
   DECLARE
     sex1 VARCHAR2(100) := SEX;
   BEGIN
      IF (sex IS NULL) THEN
        sex1 := 'M';
      ELSE
        sex1 := sex;
      END IF;
      SELECT sqlproc_sequence.nextval INTO newid FROM dual;
      INSERT INTO PERSON (ID, BIRTHDATE, LASTUPDATED, LASTUPDATEDBY, CREATEDDATE, CREATEDBY, VERSION, CONTACT, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, SEX, CLOTHES_SIZE) 
      VALUES (newid, birthdate, CURRENT_TIMESTAMP, 'test', NULL, NULL, 1, NULL, ssn_number, ssn_country, name_first, name_last, sex1, NULL);
      sex := sex1;
   END;
END new_person

CREATE OR REPLACE FUNCTION new_person_ret (birthdate IN DATE, ssn_number IN VARCHAR2, ssn_country IN VARCHAR2, name_first IN VARCHAR2, name_last IN VARCHAR2, sex IN VARCHAR2)
RETURN SYS_REFCURSOR
AS 
  result_cur SYS_REFCURSOR;
BEGIN
   DECLARE
     newid NUMBER(19);
     sex1 VARCHAR2(100);
   BEGIN
      IF (sex IS NULL) THEN
        sex1 := 'M';
      ELSE
        sex1 := sex;
      END IF;
      SELECT sqlproc_sequence.nextval INTO newid FROM dual;
      INSERT INTO PERSON (ID, BIRTHDATE, LASTUPDATED, LASTUPDATEDBY, CREATEDDATE, CREATEDBY, VERSION, CONTACT, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, SEX, CLOTHES_SIZE) 
      VALUES (newid, birthdate, CURRENT_TIMESTAMP, 'test', NULL, NULL, 1, NULL, ssn_number, ssn_country, name_first, name_last, sex1, NULL);

      OPEN result_cur FOR SELECT * FROM PERSON WHERE ID = newid;
      RETURN result_cur;
   END;
END new_person_ret

CREATE OR REPLACE PROCEDURE new_person_ret_proc (result_cur IN OUT SYS_REFCURSOR, birthdate IN DATE, ssn_number IN VARCHAR2, ssn_country IN VARCHAR2, name_first IN VARCHAR2, name_last IN VARCHAR2, sex IN VARCHAR2)
AS 
BEGIN
   DECLARE
     newid NUMBER(19);
     sex1 VARCHAR2(100);
   BEGIN
      IF (sex IS NULL) THEN
        sex1 := 'M';
      ELSE
        sex1 := sex;
      END IF;
      SELECT sqlproc_sequence.nextval INTO newid FROM dual;
      INSERT INTO PERSON (ID, BIRTHDATE, LASTUPDATED, LASTUPDATEDBY, CREATEDDATE, CREATEDBY, VERSION, CONTACT, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, SEX, CLOTHES_SIZE) 
      VALUES (newid, birthdate, CURRENT_TIMESTAMP, 'test', NULL, NULL, 1, NULL, ssn_number, ssn_country, name_first, name_last, sex1, NULL);

      OPEN result_cur FOR SELECT * FROM PERSON WHERE ID = newid;
   END;
END new_person_ret_proc

CREATE OR REPLACE FUNCTION an_hour_before (t IN DATE)
RETURN DATE
AS 
BEGIN
   RETURN t - INTERVAL '1' HOUR;
END an_hour_before

