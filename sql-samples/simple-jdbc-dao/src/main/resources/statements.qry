
INSERT_BANK_ACCOUNT(CRUD,final=,inx=BankAccount,outx=BankAccount,tab=billingDetails)=
  insert into %%BILLING_DETAILS (%BA_ACCOUNT, %ID, %SUBSCRIBER, %TYPE, %VERSION)
  {= values (:baAccount, :id(seq=SIMPLE_SEQUENCE), :subscriber.id, :type, :version) }
;

GET_BANK_ACCOUNT(CRUD,final=,inx=BankAccount,outx=BankAccount,tab=billingDetails=b,tab=subscriber=s)=
  select %b.BA_ACCOUNT @baAccount, %b.ID @id(id), %b.SUBSCRIBER @subscriber.id(id), %b.TYPE @type, %b.VERSION @version
         {? :subscriber(call=toInit) | , %s.LIBRARY @subscriber.library.id, %s.CONTACT @subscriber.contact.id, %s.NAME @subscriber.name, %s.VERSION @subscriber.version }
  from %%BILLING_DETAILS b
  {? :subscriber(call=toInit) | left join %%SUBSCRIBER s on %b.SUBSCRIBER = %s.ID }
  {= where
    {& %b.BA_ACCOUNT = :baAccount }
    {& %b.ID = :id }
    {& %b.SUBSCRIBER = :subscriber.id }
    {& %b.TYPE = :type }
  }
;

UPDATE_BANK_ACCOUNT(CRUD,final=,inx=BankAccount,outx=BankAccount,tab=billingDetails)=
  update %%BILLING_DETAILS
  {= set
    { ,%BA_ACCOUNT = :baAccount(call=isDef) }
    { ,%SUBSCRIBER = :subscriber.id }
    { ,%TYPE = :type }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_BANK_ACCOUNT(CRUD,final=,inx=BankAccount,outx=BankAccount,tab=billingDetails)=
  delete from %%BILLING_DETAILS
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_BANK_ACCOUNT(QRY,final=,inx=BankAccount,outx=BankAccount,tab=billingDetails=b,tab=subscriber=s)=
  select %b.BA_ACCOUNT @baAccount, %b.ID @id(id), %b.SUBSCRIBER @subscriber.id(id), %b.TYPE @type, %b.VERSION @version
         {? :subscriber(call=toInit) | , %s.LIBRARY @subscriber.library.id, %s.CONTACT @subscriber.contact.id, %s.NAME @subscriber.name, %s.VERSION @subscriber.version }
  from %%BILLING_DETAILS b
  {? :subscriber(call=toInit) | left join %%SUBSCRIBER s on %b.SUBSCRIBER = %s.ID }
  {= where
    {& UPPER(%b.BA_ACCOUNT) like :+baAccount }
    {& %b.ID = :id }
    {& %b.SUBSCRIBER = :subscriber.id }
    {& UPPER(%b.TYPE) like :+type }
  }
;

INSERT_NEW_BOOK(CRUD,final=,inx=NewBook,outx=NewBook,tab=book)=
  insert into %%BOOK (%MEDIA_ID, %ISBN)
  {= values (:id, :newIsbn) }
;

GET_NEW_BOOK(CRUD,final=,inx=NewBook,outx=NewBook,tab=book=b,tab=media=m,tab=performer=p)=
  select %b.MEDIA_ID @id(id), %b.ISBN @newIsbn
         , %m.TITLE @title, %m.AUTHOR @author.id(id), %m.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%BOOK b
  join %%MEDIA m on %b.MEDIA_ID = %m.ID
  {? :author(call=toInit) | left join %%PERFORMER p on %m.AUTHOR = %p.ID }
  {= where
    {& %b.MEDIA_ID = :id }
    {& %b.ISBN = :newIsbn }
    {& %m.TITLE = :title }
    {& %m.AUTHOR = :author.id }
  }
;

UPDATE_NEW_BOOK(CRUD,final=,inx=NewBook,outx=NewBook,tab=book)=
  update %%BOOK
  {= set
    { ,%ISBN = :newIsbn }
  }
  {= where
    {& %MEDIA_ID = :id(!empty) }
  }
;

DELETE_NEW_BOOK(CRUD,final=,inx=NewBook,outx=NewBook,tab=book)=
  delete from %%BOOK
  {= where
    {& %MEDIA_ID = :id(!empty) }
  }
;

SELECT_NEW_BOOK(QRY,final=,inx=NewBook,outx=NewBook,tab=book=b,tab=media=m,tab=performer=p)=
  select %b.MEDIA_ID @id(id), %b.ISBN @newIsbn
         , %m.TITLE @title, %m.AUTHOR @author.id(id), %m.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%BOOK b
  join %%MEDIA m on %b.MEDIA_ID = %m.ID
  {? :author(call=toInit) | left join %%PERFORMER p on %m.AUTHOR = %p.ID }
  {= where
    {& %b.MEDIA_ID = :id }
    {& UPPER(%b.ISBN) like :+newIsbn }
    {& UPPER(%m.TITLE) like :+title }
    {& %m.AUTHOR = :author.id }
  }
  {#1 order by %b.MEDIA_ID }
;

INSERT_CONTACT(CRUD,final=,inx=Contact,outx=Contact,tab=contact)=
  insert into %%CONTACT (%ID, %PERSON_ID, %ADDRESS, %PHONE_NUMBER, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :person.id, :address, :phoneNumber(type=phone), :version) }
;

GET_CONTACT(CRUD,final=,inx=Contact,outx=Contact,tab=contact=c,tab=person=p)=
  select %c.ID @id(id), %c.PERSON_ID @person.id(id), %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber(type=phone), %c.VERSION @version
         {? :person(call=toInit) | , %p.FIRST_NAME @person.firstName, %p.LAST_NAME @person.lastName, %p.DATE_OF_BIRTH @person.dateOfBirth, %p.SSN @person.ssn, %p.VERSION @person.version }
  from %%CONTACT c
  {? :person(call=toInit) | left join %%PERSON p on %c.PERSON_ID = %p.ID }
  {= where
    {& %c.ID = :id }
    {& %c.PERSON_ID = :person.id }
    {& %c.ADDRESS = :address }
    {& %c.PHONE_NUMBER = :phoneNumber(type=phone) }
  }
;

UPDATE_CONTACT(CRUD,final=,inx=Contact,outx=Contact,tab=contact)=
  update %%CONTACT
  {= set
    { ,%PERSON_ID = :person.id(call=isDef) }
    { ,%ADDRESS = :address(call=isDef) }
    { ,%PHONE_NUMBER = :phoneNumber(type=phone,call=isDef) }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_CONTACT(CRUD,final=,inx=Contact,outx=Contact,tab=contact)=
  delete from %%CONTACT
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_CONTACT(QRY,final=,inx=Contact,outx=Contact,tab=contact=c,tab=person=p)=
  select %c.ID @id(id), %c.PERSON_ID @person.id(id), %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber(type=phone), %c.VERSION @version
         {? :person(call=toInit) | , %p.FIRST_NAME @person.firstName, %p.LAST_NAME @person.lastName, %p.DATE_OF_BIRTH @person.dateOfBirth, %p.SSN @person.ssn, %p.VERSION @person.version }
  from %%CONTACT c
  {? :person(call=toInit) | left join %%PERSON p on %c.PERSON_ID = %p.ID }
  {= where
    {& %c.ID = :id }
    {& %c.PERSON_ID = :person.id }
    {& UPPER(%c.ADDRESS) like :+address }
    {& %c.PHONE_NUMBER = :phoneNumber(type=phone) }
  }
  {#1 order by %c.ID }
  {#2 order by %c.PERSON_ID }
;

INSERT_CREDIT_CARD(CRUD,final=,inx=CreditCard,outx=CreditCard,tab=billingDetails)=
  insert into %%BILLING_DETAILS (%CC_NUMBER, %ID, %SUBSCRIBER, %TYPE, %VERSION)
  {= values (:ccNumber, :id(seq=SIMPLE_SEQUENCE), :subscriber.id, :type, :version) }
;

GET_CREDIT_CARD(CRUD,final=,inx=CreditCard,outx=CreditCard,tab=billingDetails=b,tab=subscriber=s)=
  select %b.CC_NUMBER @ccNumber, %b.ID @id(id), %b.SUBSCRIBER @subscriber.id(id), %b.TYPE @type, %b.VERSION @version
         {? :subscriber(call=toInit) | , %s.LIBRARY @subscriber.library.id, %s.CONTACT @subscriber.contact.id, %s.NAME @subscriber.name, %s.VERSION @subscriber.version }
  from %%BILLING_DETAILS b
  {? :subscriber(call=toInit) | left join %%SUBSCRIBER s on %b.SUBSCRIBER = %s.ID }
  {= where
    {& %b.CC_NUMBER = :ccNumber }
    {& %b.ID = :id }
    {& %b.SUBSCRIBER = :subscriber.id }
    {& %b.TYPE = :type }
  }
;

UPDATE_CREDIT_CARD(CRUD,final=,inx=CreditCard,outx=CreditCard,tab=billingDetails)=
  update %%BILLING_DETAILS
  {= set
    { ,%CC_NUMBER = :ccNumber(call=isDef) }
    { ,%SUBSCRIBER = :subscriber.id }
    { ,%TYPE = :type }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_CREDIT_CARD(CRUD,final=,inx=CreditCard,outx=CreditCard,tab=billingDetails)=
  delete from %%BILLING_DETAILS
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_CREDIT_CARD(QRY,final=,inx=CreditCard,outx=CreditCard,tab=billingDetails=b,tab=subscriber=s)=
  select %b.CC_NUMBER @ccNumber, %b.ID @id(id), %b.SUBSCRIBER @subscriber.id(id), %b.TYPE @type, %b.VERSION @version
         {? :subscriber(call=toInit) | , %s.LIBRARY @subscriber.library.id, %s.CONTACT @subscriber.contact.id, %s.NAME @subscriber.name, %s.VERSION @subscriber.version }
  from %%BILLING_DETAILS b
  {? :subscriber(call=toInit) | left join %%SUBSCRIBER s on %b.SUBSCRIBER = %s.ID }
  {= where
    {& %b.CC_NUMBER = :ccNumber }
    {& %b.ID = :id }
    {& %b.SUBSCRIBER = :subscriber.id }
    {& UPPER(%b.TYPE) like :+type }
  }
;

INSERT_LIBRARY(CRUD,final=,inx=Library,outx=Library,tab=library)=
  insert into %%LIBRARY (%ID, %NAME, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :name, :version) }
;

GET_LIBRARY(CRUD,final=,inx=Library,outx=Library,tab=library=l,tab=subscriber=s,tab=physicalMedia=p)=
  select %l.ID @id(id), %l.NAME @name, %l.VERSION @version
         {? :subscribers(call=toInit) | , %s.ID @subscribers.id(id), %s.LIBRARY @subscribers.library.id, %s.CONTACT @subscribers.contact.id, %s.NAME @subscribers.name, %s.VERSION @subscribers.version }
         {? :catalog(call=toInit) | , %p.ID @catalog.id(id), %p.LOCATION @catalog.location, %p.MEDIA @catalog.media.id, %p.LIBRARY @catalog.library.id, %p.VERSION @catalog.version }
  from %%LIBRARY l
  {? :subscribers(call=toInit) | left join %%SUBSCRIBER s on %l.ID = %s.LIBRARY }
  {? :catalog(call=toInit) | left join %%PHYSICAL_MEDIA p on %l.ID = %p.LIBRARY }
  {= where
    {& %l.ID = :id }
    {& %l.NAME = :name }
  }
;

UPDATE_LIBRARY(CRUD,final=,inx=Library,outx=Library,tab=library)=
  update %%LIBRARY
  {= set
    { ,%NAME = :name }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_LIBRARY(CRUD,final=,inx=Library,outx=Library,tab=library)=
  delete from %%LIBRARY
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_LIBRARY(QRY,final=,inx=Library,outx=Library,tab=library=l,tab=subscriber=s,tab=physicalMedia=p)=
  select %l.ID @id(id), %l.NAME @name, %l.VERSION @version
         {? :subscribers(call=toInit) | , %s.ID @subscribers.id(id), %s.LIBRARY @subscribers.library.id, %s.CONTACT @subscribers.contact.id, %s.NAME @subscribers.name, %s.VERSION @subscribers.version }
         {? :catalog(call=toInit) | , %p.ID @catalog.id(id), %p.LOCATION @catalog.location, %p.MEDIA @catalog.media.id, %p.LIBRARY @catalog.library.id, %p.VERSION @catalog.version }
  from %%LIBRARY l
  {? :subscribers(call=toInit) | left join %%SUBSCRIBER s on %l.ID = %s.LIBRARY }
  {? :catalog(call=toInit) | left join %%PHYSICAL_MEDIA p on %l.ID = %p.LIBRARY }
  {= where
    {& %l.ID = :id }
    {& UPPER(%l.NAME) like :+name }
  }
  {#1 order by %l.ID }
;

INSERT_MEDIA(CRUD,final=,inx=Media,outx=Media,tab=media)=
  insert into %%MEDIA (%ID, %TITLE, %AUTHOR, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :title, :author.id, :version) }
;

GET_MEDIA(CRUD,final=,inx=Media,outx=Media,tab=media=m,tab=performer=p)=
  select %m.ID @id(id), %m.TITLE @title, %m.AUTHOR @author.id(id), %m.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%MEDIA m
  {? :author(call=toInit) | left join %%PERFORMER p on %m.AUTHOR = %p.ID }
  {= where
    {& %m.ID = :id }
    {& %m.TITLE = :title }
    {& %m.AUTHOR = :author.id }
  }
;

UPDATE_MEDIA(CRUD,final=,inx=Media,outx=Media,tab=media)=
  update %%MEDIA
  {= set
    { ,%TITLE = :title(call=isDef) }
    { ,%AUTHOR = :author.id(call=isDef) }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_MEDIA(CRUD,final=,inx=Media,outx=Media,tab=media)=
  delete from %%MEDIA
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_MEDIA(QRY,final=,inx=Media,outx=Media,tab=media=m,tab=performer=p)=
  select %m.ID @id(id), %m.TITLE @title, %m.AUTHOR @author.id(id), %m.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%MEDIA m
  {? :author(call=toInit) | left join %%PERFORMER p on %m.AUTHOR = %p.ID }
  {= where
    {& %m.ID = :id }
    {& UPPER(%m.TITLE) like :+title }
    {& %m.AUTHOR = :author.id }
  }
  {#1 order by %m.ID }
  {#2 order by %m.AUTHOR }
;

INSERT_MOVIE(CRUD,final=,inx=Movie,outx=Movie,tab=movie)=
  insert into %%MOVIE (%MEDIA_ID, %URLIMDB, %PLAYLENGTH)
  {= values (:id, :urlimdb, :playlength) }
;

GET_MOVIE(CRUD,final=,inx=Movie,outx=Movie,tab=movie=m,tab=media=m1,tab=performer=p)=
  select %m.MEDIA_ID @id(id), %m.URLIMDB @urlimdb, %m.PLAYLENGTH @playlength
         , %m1.TITLE @title, %m1.AUTHOR @author.id(id), %m1.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%MOVIE m
  join %%MEDIA m1 on %m.MEDIA_ID = %m1.ID
  {? :author(call=toInit) | left join %%PERFORMER p on %m1.AUTHOR = %p.ID }
  {= where
    {& %m.MEDIA_ID = :id }
    {& %m.URLIMDB = :urlimdb }
    {& %m.PLAYLENGTH = :playlength }
    {& %m1.TITLE = :title }
    {& %m1.AUTHOR = :author.id }
  }
;

UPDATE_MOVIE(CRUD,final=,inx=Movie,outx=Movie,tab=movie)=
  update %%MOVIE
  {= set
    { ,%URLIMDB = :urlimdb }
    { ,%PLAYLENGTH = :playlength }
  }
  {= where
    {& %MEDIA_ID = :id(!empty) }
  }
;

DELETE_MOVIE(CRUD,final=,inx=Movie,outx=Movie,tab=movie)=
  delete from %%MOVIE
  {= where
    {& %MEDIA_ID = :id(!empty) }
  }
;

SELECT_MOVIE(QRY,final=,inx=Movie,outx=Movie,tab=movie=m,tab=media=m1,tab=performer=p)=
  select %m.MEDIA_ID @id(id), %m.URLIMDB @urlimdb, %m.PLAYLENGTH @playlength
         , %m1.TITLE @title, %m1.AUTHOR @author.id(id), %m1.VERSION @version
         {? :author(call=toInit) | , %p.PERSON_ID @author.person.id, %p.VER @author.ver }
  from %%MOVIE m
  join %%MEDIA m1 on %m.MEDIA_ID = %m1.ID
  {? :author(call=toInit) | left join %%PERFORMER p on %m1.AUTHOR = %p.ID }
  {= where
    {& %m.MEDIA_ID = :id }
    {& UPPER(%m.URLIMDB) like :+urlimdb }
    {& %m.PLAYLENGTH = :playlength }
    {& UPPER(%m1.TITLE) like :+title }
    {& %m1.AUTHOR = :author.id }
  }
  {#1 order by %m.MEDIA_ID }
;

INSERT_PAYMENT(CRUD,final=,inx=Payment,outx=Payment,tab=payment)=
  insert into %%PAYMENT (%ID, %BILLING_DETAILS, %PAID, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :billingDetails.id, :paid, :version) }
;

GET_PAYMENT(CRUD,final=,inx=Payment,outx=Payment,tab=payment=p,tab=billingDetails=b)=
  select %p.ID @id(id), %p.PAID @paid, %p.VERSION @version
         {? :billingDetails(call=toInit) | , %b.TYPE @billingDetails(discr)type, %b.SUBSCRIBER @billingDetails.subscriber.id, %b.VERSION @billingDetails.version, %b.CC_NUMBER @billingDetails.ccNumber, %b.BA_ACCOUNT @billingDetails.baAccount }
  from %%PAYMENT p
  {? :billingDetails(call=toInit) | left join %%BILLING_DETAILS b on %p.BILLING_DETAILS = %b.ID }
  {= where
    {& %p.ID = :id }
    {& %p.BILLING_DETAILS = :billingDetails.id }
    {& %p.PAID = :paid }
  }
;

UPDATE_PAYMENT(CRUD,final=,inx=Payment,outx=Payment,tab=payment)=
  update %%PAYMENT
  {= set
    { ,%BILLING_DETAILS = :billingDetails.id }
    { ,%PAID = :paid }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_PAYMENT(CRUD,final=,inx=Payment,outx=Payment,tab=payment)=
  delete from %%PAYMENT
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_PAYMENT(QRY,final=,inx=Payment,outx=Payment,tab=payment=p,tab=billingDetails=b)=
  select %p.ID @id(id), %p.PAID @paid, %p.VERSION @version
         {? :billingDetails(call=toInit) | , %b.TYPE @billingDetails(discr)type, %b.SUBSCRIBER @billingDetails.subscriber.id, %b.VERSION @billingDetails.version, %b.CC_NUMBER @billingDetails.ccNumber, %b.BA_ACCOUNT @billingDetails.baAccount }
  from %%PAYMENT p
  {? :billingDetails(call=toInit) | left join %%BILLING_DETAILS b on %p.BILLING_DETAILS = %b.ID }
  {= where
    {& %p.ID = :id }
    {& %p.BILLING_DETAILS = :billingDetails.id }
    {& %p.PAID = :paid }
  }
  {#1 order by %p.ID }
  {#2 order by %p.BILLING_DETAILS }
;

INSERT_PERFORMER(CRUD,final=,inx=Performer,outx=Performer,tab=performer)=
  insert into %%PERFORMER (%ID, %PERSON_ID, %VER)
  {= values (:id(seq=SIMPLE_SEQUENCE), :person.id, :ver) }
;

GET_PERFORMER(CRUD,final=,inx=Performer,outx=Performer,tab=performer=p,tab=person=p1,tab=media=m,tab=movie=m1,tab=book=b)=
  select %p.ID @id(id), %p.PERSON_ID @person.id(id), %p.VER @ver
         {? :person(call=toInit) | , %p1.FIRST_NAME @person.firstName, %p1.LAST_NAME @person.lastName, %p1.DATE_OF_BIRTH @person.dateOfBirth, %p1.SSN @person.ssn, %p1.VERSION @person.version }
         {? :work(call=toInit) | , %m1.MEDIA_ID @work(gtype=movie)id(id), %m1.URLIMDB @work.urlimdb, %m1.PLAYLENGTH @work.playlength, %b.MEDIA_ID @work(gtype=book)id(id), %b.ISBN @work.newIsbn, %m.ID @work.id(id), %m.TITLE @work.title, %m.AUTHOR @work.author.id, %m.VERSION @work.version }
  from %%PERFORMER p
  {? :person(call=toInit) | left join %%PERSON p1 on %p.PERSON_ID = %p1.ID }
  {? :work(call=toInit) | left join %%MEDIA m on %p.ID = %m.AUTHOR left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {= where
    {& %p.ID = :id }
    {& %p.PERSON_ID = :person.id }
  }
;

UPDATE_PERFORMER(CRUD,final=,inx=Performer,outx=Performer,tab=performer)=
  update %%PERFORMER
  {= set
    { ,%PERSON_ID = :person.id }
    { ,%VER = %VER + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VER = :ver(!empty) }
  }
;

DELETE_PERFORMER(CRUD,final=,inx=Performer,outx=Performer,tab=performer)=
  delete from %%PERFORMER
  {= where
    {& %ID = :id(!empty) }
    {& %VER = :ver(!empty) }
  }
;

SELECT_PERFORMER(QRY,final=,inx=Performer,outx=Performer,tab=performer=p,tab=person=p1,tab=media=m,tab=movie=m1,tab=book=b)=
  select %p.ID @id(id), %p.PERSON_ID @person.id(id), %p.VER @ver
         {? :person(call=toInit) | , %p1.FIRST_NAME @person.firstName, %p1.LAST_NAME @person.lastName, %p1.DATE_OF_BIRTH @person.dateOfBirth, %p1.SSN @person.ssn, %p1.VERSION @person.version }
         {? :work(call=toInit) | , %m1.MEDIA_ID @work(gtype=movie)id(id), %m1.URLIMDB @work.urlimdb, %m1.PLAYLENGTH @work.playlength, %b.MEDIA_ID @work(gtype=book)id(id), %b.ISBN @work.newIsbn, %m.ID @work.id(id), %m.TITLE @work.title, %m.AUTHOR @work.author.id, %m.VERSION @work.version }
  from %%PERFORMER p
  {? :person(call=toInit) | left join %%PERSON p1 on %p.PERSON_ID = %p1.ID }
  {? :work(call=toInit) | left join %%MEDIA m on %p.ID = %m.AUTHOR left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {= where
    {& %p.ID = :id }
    {& %p.PERSON_ID = :person.id }
  }
  {#1 order by %p.ID }
  {#2 order by %p.PERSON_ID }
;

INSERT_PERSON(CRUD,final=,inx=Person,outx=Person,tab=person)=
  insert into %%PERSON (%ID, %FIRST_NAME, %LAST_NAME, %DATE_OF_BIRTH, %SSN, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :firstName, :lastName, :dateOfBirth, :ssn, :version) }
;

GET_PERSON(CRUD,final=,inx=Person,outx=Person,tab=person=p,tab=personLibrary=p1,tab=media=m,tab=movie=m1,tab=book=b,tab=contact=c)=
  select %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.SSN @ssn, %p.VERSION @version
         {? :library(call=toInit) | , %m1.MEDIA_ID @library(gtype=movie)id(id), %m1.URLIMDB @library.urlimdb, %m1.PLAYLENGTH @library.playlength, %b.MEDIA_ID @library(gtype=book)id(id), %b.ISBN @library.newIsbn, %m.ID @library.id(id), %m.TITLE @library.title, %m.AUTHOR @library.author.id, %m.VERSION @library.version }
         {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.person.id, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber(type=phone), %c.VERSION @contacts.version }
  from %%PERSON p
  {? :library(call=toInit) | left join %%PERSON_LIBRARY p1 on %p.ID = %p1.PERSON_ID left join %%MEDIA m on %p1.MEDIA_ID = %m.ID left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {= where
    {& %p.ID = :id }
    {& %p.FIRST_NAME = :firstName }
    {& %p.LAST_NAME = :lastName }
    {& %p.DATE_OF_BIRTH = :dateOfBirth }
    {& %p.SSN = :ssn }
  }
;

UPDATE_PERSON(CRUD,final=,inx=Person,outx=Person,tab=person)=
  update %%PERSON
  {= set
    { ,%FIRST_NAME = :firstName(call=isDef) }
    { ,%LAST_NAME = :lastName(call=isDef) }
    { ,%DATE_OF_BIRTH = :dateOfBirth(call=isDef) }
    { ,%SSN = :ssn(call=isDef) }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_PERSON(CRUD,final=,inx=Person,outx=Person,tab=person)=
  delete from %%PERSON
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_PERSON(QRY,final=,inx=Person,outx=Person,tab=person=p,tab=personLibrary=p1,tab=media=m,tab=movie=m1,tab=book=b,tab=contact=c)=
  select %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.SSN @ssn, %p.VERSION @version
         {? :library(call=toInit) | , %m1.MEDIA_ID @library(gtype=movie)id(id), %m1.URLIMDB @library.urlimdb, %m1.PLAYLENGTH @library.playlength, %b.MEDIA_ID @library(gtype=book)id(id), %b.ISBN @library.newIsbn, %m.ID @library.id(id), %m.TITLE @library.title, %m.AUTHOR @library.author.id, %m.VERSION @library.version }
         {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.person.id, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber(type=phone), %c.VERSION @contacts.version }
  from %%PERSON p
  {? :library(call=toInit) | left join %%PERSON_LIBRARY p1 on %p.ID = %p1.PERSON_ID left join %%MEDIA m on %p1.MEDIA_ID = %m.ID left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {= where
    {& %p.ID = :id }
    {& UPPER(%p.FIRST_NAME) like :+firstName }
    {& UPPER(%p.LAST_NAME) like :+lastName }
    {& %p.DATE_OF_BIRTH = :dateOfBirth }
    {& UPPER(%p.SSN) like :+ssn }
  }
  {#1 order by %p.ID }
  {#2 order by %p.LAST_NAME }
;

INSERT_PERSON_LIBRARY(CRUD,final=,inx=PersonLibrary,outx=PersonLibrary,tab=personLibrary)=
  insert into %%PERSON_LIBRARY (%ID, %PERSON_ID, %MEDIA_ID)
  {= values (:id(seq=SIMPLE_SEQUENCE), :personId, :mediaId) }
;

GET_PERSON_LIBRARY(CRUD,final=,inx=PersonLibrary,outx=PersonLibrary,tab=personLibrary)=
  select %ID @id(id), %PERSON_ID @personId, %MEDIA_ID @mediaId
  from %%PERSON_LIBRARY
  {= where
    {& %ID = :id }
    {& %PERSON_ID = :personId }
    {& %MEDIA_ID = :mediaId }
  }
;

UPDATE_PERSON_LIBRARY(CRUD,final=,inx=PersonLibrary,outx=PersonLibrary,tab=personLibrary)=
  update %%PERSON_LIBRARY
  {= set
    { ,%PERSON_ID = :personId }
    { ,%MEDIA_ID = :mediaId }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_PERSON_LIBRARY(CRUD,final=,inx=PersonLibrary,outx=PersonLibrary,tab=personLibrary)=
  delete from %%PERSON_LIBRARY
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PERSON_LIBRARY(QRY,final=,inx=PersonLibrary,outx=PersonLibrary,tab=personLibrary)=
  select %ID @id(id), %PERSON_ID @personId, %MEDIA_ID @mediaId
  from %%PERSON_LIBRARY
  {= where
    {& %ID = :id }
    {& %PERSON_ID = :personId }
    {& %MEDIA_ID = :mediaId }
  }
  {#1 order by %ID }
  {#2 order by %PERSON_ID }
  {#3 order by %MEDIA_ID }
;

INSERT_PHYSICAL_MEDIA(CRUD,final=,inx=PhysicalMedia,outx=PhysicalMedia,tab=physicalMedia)=
  insert into %%PHYSICAL_MEDIA (%ID, %LOCATION, %MEDIA, %LIBRARY, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :location, :media.id, :library.id, :version) }
;

GET_PHYSICAL_MEDIA(CRUD,final=,inx=PhysicalMedia,outx=PhysicalMedia,tab=physicalMedia=p,tab=library=l,tab=media=m,tab=movie=m1,tab=book=b)=
  select %p.ID @id(id), %p.LOCATION @location, %p.LIBRARY @library.id(id), %p.VERSION @version
         {? :library(call=toInit) | , %l.NAME @library.name, %l.VERSION @library.version }
         {? :media(call=toInit) | , %m1.MEDIA_ID @media(gtype=movie)id(id), %m1.URLIMDB @media.urlimdb, %m1.PLAYLENGTH @media.playlength, %b.MEDIA_ID @media(gtype=book)id(id), %b.ISBN @media.newIsbn, %m.TITLE @media.title, %m.AUTHOR @media.author.id, %m.VERSION @media.version }
  from %%PHYSICAL_MEDIA p
  {? :library(call=toInit) | left join %%LIBRARY l on %p.LIBRARY = %l.ID }
  {? :media(call=toInit) | left join %%MEDIA m on %p.MEDIA = %m.ID left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {= where
    {& %p.ID = :id }
    {& %p.LOCATION = :location }
    {& %p.MEDIA = :media.id }
    {& %p.LIBRARY = :library.id }
  }
;

UPDATE_PHYSICAL_MEDIA(CRUD,final=,inx=PhysicalMedia,outx=PhysicalMedia,tab=physicalMedia)=
  update %%PHYSICAL_MEDIA
  {= set
    { ,%LOCATION = :location }
    { ,%MEDIA = :media.id }
    { ,%LIBRARY = :library.id }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_PHYSICAL_MEDIA(CRUD,final=,inx=PhysicalMedia,outx=PhysicalMedia,tab=physicalMedia)=
  delete from %%PHYSICAL_MEDIA
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_PHYSICAL_MEDIA(QRY,final=,inx=PhysicalMedia,outx=PhysicalMedia,tab=physicalMedia=p,tab=library=l,tab=media=m,tab=movie=m1,tab=book=b)=
  select %p.ID @id(id), %p.LOCATION @location, %p.LIBRARY @library.id(id), %p.VERSION @version
         {? :library(call=toInit) | , %l.NAME @library.name, %l.VERSION @library.version }
         {? :media(call=toInit) | , %m1.MEDIA_ID @media(gtype=movie)id(id), %m1.URLIMDB @media.urlimdb, %m1.PLAYLENGTH @media.playlength, %b.MEDIA_ID @media(gtype=book)id(id), %b.ISBN @media.newIsbn, %m.TITLE @media.title, %m.AUTHOR @media.author.id, %m.VERSION @media.version }
  from %%PHYSICAL_MEDIA p
  {? :library(call=toInit) | left join %%LIBRARY l on %p.LIBRARY = %l.ID }
  {? :media(call=toInit) | left join %%MEDIA m on %p.MEDIA = %m.ID left join %%MOVIE m1 on %m.ID = %m1.MEDIA_ID left join %%BOOK b on %m.ID = %b.MEDIA_ID }
  {= where
    {& %p.ID = :id }
    {& UPPER(%p.LOCATION) like :+location }
    {& %p.MEDIA = :media.id }
    {& %p.LIBRARY = :library.id }
  }
  {#1 order by %p.ID }
;

INSERT_SUBSCRIBER(CRUD,final=,inx=Subscriber,outx=Subscriber,tab=subscriber)=
  insert into %%SUBSCRIBER (%ID, %LIBRARY, %CONTACT, %NAME, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :library.id, :contact.id, :name, :version) }
;

GET_SUBSCRIBER(CRUD,final=,inx=Subscriber,outx=Subscriber,tab=subscriber=s,tab=library=l,tab=billingDetails=b,tab=contact=c)=
  select %s.ID @id(id), %s.LIBRARY @library.id(id), %s.CONTACT @contact.id(id), %s.NAME @name, %s.VERSION @version
         {? :library(call=toInit) | , %l.NAME @library.name, %l.VERSION @library.version }
         {? :billingDetails(call=toInit) | , %b.TYPE @billingDetails(discr)type, %b.ID @billingDetails.id(id), %b.SUBSCRIBER @billingDetails.subscriber.id, %b.VERSION @billingDetails.version, %b.CC_NUMBER @billingDetails.ccNumber, %b.BA_ACCOUNT @billingDetails.baAccount }
         {? :contact(call=toInit) | , %c.PERSON_ID @contact.person.id, %c.ADDRESS @contact.address, %c.PHONE_NUMBER @contact.phoneNumber(type=phone), %c.VERSION @contact.version }
  from %%SUBSCRIBER s
  {? :library(call=toInit) | left join %%LIBRARY l on %s.LIBRARY = %l.ID }
  {? :billingDetails(call=toInit) | left join %%BILLING_DETAILS b on %s.ID = %b.SUBSCRIBER }
  {? :contact(call=toInit) | left join %%CONTACT c on %s.CONTACT = %c.ID }
  {= where
    {& %s.ID = :id }
    {& %s.LIBRARY = :library.id }
    {& %s.CONTACT = :contact.id }
    {& %s.NAME = :name }
  }
;

UPDATE_SUBSCRIBER(CRUD,final=,inx=Subscriber,outx=Subscriber,tab=subscriber)=
  update %%SUBSCRIBER
  {= set
    { ,%LIBRARY = :library.id(call=isDef) }
    { ,%CONTACT = :contact.id(call=isDef) }
    { ,%NAME = :name(call=isDef) }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_SUBSCRIBER(CRUD,final=,inx=Subscriber,outx=Subscriber,tab=subscriber)=
  delete from %%SUBSCRIBER
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_SUBSCRIBER(QRY,final=,inx=Subscriber,outx=Subscriber,tab=subscriber=s,tab=library=l,tab=billingDetails=b,tab=contact=c)=
  select %s.ID @id(id), %s.LIBRARY @library.id(id), %s.CONTACT @contact.id(id), %s.NAME @name, %s.VERSION @version
         {? :library(call=toInit) | , %l.NAME @library.name, %l.VERSION @library.version }
         {? :billingDetails(call=toInit) | , %b.TYPE @billingDetails(discr)type, %b.ID @billingDetails.id(id), %b.SUBSCRIBER @billingDetails.subscriber.id, %b.VERSION @billingDetails.version, %b.CC_NUMBER @billingDetails.ccNumber, %b.BA_ACCOUNT @billingDetails.baAccount }
         {? :contact(call=toInit) | , %c.PERSON_ID @contact.person.id, %c.ADDRESS @contact.address, %c.PHONE_NUMBER @contact.phoneNumber(type=phone), %c.VERSION @contact.version }
  from %%SUBSCRIBER s
  {? :library(call=toInit) | left join %%LIBRARY l on %s.LIBRARY = %l.ID }
  {? :billingDetails(call=toInit) | left join %%BILLING_DETAILS b on %s.ID = %b.SUBSCRIBER }
  {? :contact(call=toInit) | left join %%CONTACT c on %s.CONTACT = %c.ID }
  {= where
    {& %s.ID = :id }
    {& %s.LIBRARY = :library.id }
    {& %s.CONTACT = :contact.id }
    {& UPPER(%s.NAME) like :+name }
  }
  {#1 order by %s.ID }
  {#2 order by %s.LIBRARY }
;
